/**
 * miniInfo v1.0: AudioPlayer 
 * by aeddang
 */
/*
interfaces

*/

if(typeof jarvis == "undefined") var jarvis = new Object();




jarvis.MiniTopBox= function(body,delegate,color) 
{
	this.body=body;
	this.delegate=delegate;
    if(color===undefined){
	    color="#ffffff";
    }
		

	jarvis.lib.addAttribute(this.body,"top-box");
    this.info=jarvis.miniInfo;
    

    var that=this;
    
	var addMenuA=new Array();
    addMenuA[0]='다시듣기';
	//addMenuA[1]='보이는라디오';
    
	var channelNum=this.info.CHANNEL_TYPE_VIEW.length;
	var addNum=addMenuA.length;
    var num=channelNum+addNum;
	
	//make top
	this.topNavi=document.createElement("div");
    jarvis.lib.addAttribute(this.topNavi,"top-navi uicomponent");
    this.body.appendChild(this.topNavi);

	this.homeBtn=document.createElement("button");
    jarvis.lib.addAttribute(this.homeBtn,"btn align-left btn-image btn-mini");
	jarvis.lib.addEventListener(this.homeBtn,"click",function (e){ jarvis.lib.excuteDelegate(that.delegate,"goHome");});
    
	this.pageNavi=document.createElement("div");
    jarvis.lib.addAttribute(this.pageNavi,"");
    
    this.equalizerBox=document.createElement("div");
	jarvis.lib.addAttribute(this.equalizerBox,"equalizer align-right");
    this.topNavi.appendChild(this.pageNavi);
    this.topNavi.appendChild(this.homeBtn);
	this.topNavi.appendChild(this.equalizerBox);
    
    

	this.equalizer=new jarvis.Equalizer(this.equalizerBox);

	
	var delegate=function(){}; 
	delegate.prototype = {
		                      pageChange : function(idx)
                              {
								  
								   jarvis.lib.excuteDelegate(that.delegate,"changeChannel",[idx]);
							  }
						 }

	var option=new jarvis.UIPageControlOption();
	option.pageSize=10;
	option.usedNumber=false;
    option.cssKey="pagecontrol";
	
    this.pageControl=new jarvis.UIPageControl(this.pageNavi,new delegate(),option);
    this.pageControl.infoA=new Array();
    for(var i=0;i<num;++i){
	    
	    if(i<channelNum){
			this.pageControl.infoA.push(this.info.CHANNEL_TYPE_VIEW[i]);
		}else{
		    this.pageControl.infoA.push(addMenuA[i-channelNum]);
		}
		

    }
	this.pageControl.initReset(num); 
	
	this.channelBox=document.createElement("div");
    jarvis.lib.addAttribute(this.channelBox,"channel-box");
    
	
	
	this.body.appendChild(this.channelBox);

	var bg=document.createElement("div");
    jarvis.lib.addAttribute(bg,"bg");
    

	this.navi=document.createElement("div");
    jarvis.lib.addAttribute(this.navi,"navi animated-none");

	var overlay=document.createElement("span");
    if(this.info.isMobile==false){
        overlay.disabled=true;
		overlay.style.pointerEvents="none";
	
	}
	
	
	jarvis.lib.addAttribute(overlay,"overlay");
    var overImg=document.createElement("img");
    overImg.src=jarvis.dirPath+'style/mini/channel_bg_over.png';
	overlay.appendChild(overImg);
    
    this.point=document.createElement("div");
    jarvis.lib.addAttribute(this.point,"point");

	this.overlay=overlay;
    this.overlay.img=overImg;

	this.channelBox.appendChild(bg);
	this.channelBox.appendChild(this.navi);
	this.channelBox.appendChild(overlay);
	this.channelBox.appendChild(this.point);
	

	
	this.channelA=new Array();
	this.channelPosA=new Array();

	this.currentChannel=0;
   

	var pos=0;
	var channel;
	var bounce;
	var w=78;
   
	for(var i=0;i<num;++i){
	    channel=document.createElement("button");
		jarvis.lib.addAttribute(channel,"font-big btn btn-text");
        if(jarvis.lib.mobile==true){
			jarvis.lib.addAttribute(channel,"btn-mobile");
		}
		this.navi.appendChild(channel);
	    if(i<channelNum){
			channel.innerHTML=this.info.CHANNEL_TYPE_VIEW[i];
		}else{
		    channel.innerHTML=addMenuA[i-channelNum];
		}
		channel.style.width=w+"px";
        channel.style.left=pos+"px";
        this.channelA.push(channel);
		this.channelPosA[i]=pos+Math.floor(w/2);
		jarvis.lib.addEventListener(channel,"click",function (e){ channelClick(e)});
		pos=pos+w;

    }
	this.changeColor(color);
    this.navi.style.width=pos+"px";

    
    this.moveAble=true;
	var startPos=-1;
	var isGestureComplete=false;
    var gestureDelegate=function(){}; 
   
	gestureDelegate.prototype = {
									stateChange: function(e,changeValue)
									{
									    
                                        
										if(e==jarvis.GestureElement.START){
											
											isGestureComplete=false;
											startPos=jarvis.lib.getNumber(that.navi.style.left);
											
										}else if(e==jarvis.GestureElement.MOVE_H)
										{
											moveChannel(changeValue.x);
										}else if(e==jarvis.GestureElement.END)
										{
											moveCompleteChannel();
										}
									
									},
									gestureComplete: function(e,value)
									{
										if(e==jarvis.GestureElement.PAN_RIGHT){
											gestureCompleteChannel(-1);
										}else if(e==jarvis.GestureElement.PAN_LEFT){
											gestureCompleteChannel(1);
										}else if(e==jarvis.GestureElement.TOUCH){
											gestureCompleteTouch(value);
										}
									}
							    }
							  
    
	
	var gestureElement=new  jarvis.GestureElement( this.overlay ,new gestureDelegate(),false,true);
	if(this.info.isMobile==false){
		jarvis.lib.addEventListener(this.overlay,"click",function (e){ clickComplete(e)});
	}
    function moveChannel(changeValue)
	{
		
		 jarvis.config.isAnimation=true;
		 var tx=startPos+changeValue;
		 that.navi.style.left=tx+'px';
	} 
	function gestureCompleteChannel(value)
	{
		if(Math.abs(gestureElement.changePosA[0].x)>w){
		     return;
		}
		
		isGestureComplete=true;
		jarvis.config.isAnimation=false;
		var idx=that.currentChannel+value;
		jarvis.lib.excuteDelegate(that.delegate,"changeChannel",[idx]);

	}

	function gestureCompleteTouch(value)
	{
		
		isGestureComplete=true;
		var touchX=value.x;
        jarvis.debuger.trace("touchX : "+touchX);
		channelCheck(touchX);

	}
    

	function moveCompleteChannel()
	{
        
	    if(isGestureComplete==true){
		    return;
		}
		jarvis.config.isAnimation=false;
		var tx=jarvis.lib.getNumber(that.navi.style.left);

		var idx=0;
		var pos=0;
		var num=that.channelPosA.length;
		var gep=w*num;
		var cg;
        
		var bounce=jarvis.lib.getAbsoluteBounce(that.channelBox);
        var sx=Math.floor(bounce.width/2);
       

		for(var i=0;i<that.channelPosA.length;++i){
		    pos=sx-that.channelPosA[i];
			cg=Math.abs(pos-tx);
	
			if(gep>cg){
				gep=cg;
				idx=i;
			}
		}
       
		jarvis.lib.excuteDelegate(that.delegate,"changeChannel",[idx]);
	} 

	function clickComplete(e)
	{
		var bounce=jarvis.lib.getAbsoluteBounce(that.overlay);
		var event = e ? e : window.event;
        var posX= event.pageX ? event.pageX : event.clientX;
		channelCheck(posX-bounce.x);

	}
    function channelCheck(checkPos)
	{
		var bounce=jarvis.lib.getAbsoluteBounce(that.overlay);
		
		var bc;
		var pos=0;
		var endPos=0;
		var idx=-1;
		var c;
        jarvis.debuger.log("checkPos : "+checkPos);
		
		for(var i=0;i<that.channelA.length;++i){
		    c=that.channelA[i];
			bc=jarvis.lib.getAbsoluteBounce(c);
	        pos=bc.x-bounce.x;
            endPos=pos+bc.width;
			jarvis.debuger.log("pos : "+pos+" endPos :"+endPos);
			if(pos<checkPos && endPos>checkPos){
				
			    idx=i;
				break;
			}
			
		}
		jarvis.debuger.log("idx : "+idx);
        if(idx!=-1){
		    jarvis.lib.excuteDelegate(that.delegate,"changeChannel",[idx]);
		}
	}
	function channelClick(e)
	{
        var tg=jarvis.lib.getEventTarget(e);
		var idx=that.channelA.indexOf(tg);
		jarvis.lib.excuteDelegate(that.delegate,"changeChannel",[idx]);
	  
	}
}

jarvis.MiniTopBox.prototype = 
{
    
	init : function(color)
	{
		
		this.stopMusic();
    },
    changeColor : function(color)
	{
		for(var i=0;i<this.channelA.length;++i){
			this.channelA[i].style.color=color;
		}		
    },
		
	playMusic : function()
	{
		
		this.equalizer.play();
    },
	stopMusic : function()
	{
		this.equalizer.stop();
    },
	
    resize : function()
	{
	    var bounce=jarvis.lib.getAbsoluteBounce(this.channelBox);
	    if(bounce.width>=10000){
		    return;
		}
		
		this.overlay.img.width=bounce.width;
	    this.overlay.img.height=bounce.height;
        jarvis.lib.setCenterPosition(this.pageNavi,bounce);
		jarvis.lib.setCenterPosition(this.point,bounce);


	},
    
    
	setChannelPosition : function(currentChannel,isAni)
	{
		
        var isComplete=true;
		
		if(currentChannel===undefined){
			
			currentChannel=this.currentChannel;
		    isAni=false;
			isComplete=false;
		}

		var bounce=jarvis.lib.getAbsoluteBounce(this.channelBox);

		if(bounce.width>=10000){
		    return this.currentChannel;
		}
       
		
		if(currentChannel<0)
		{
		   currentChannel=0;
		}else if(currentChannel>=this.channelPosA.length)
		{
		   currentChannel=this.channelPosA.length-1;
		}
        

	    this.pageControl.setPageIdx(currentChannel);
		
        
        
		
		
		var sx=Math.floor(bounce.width/2);
        var tx=sx-this.channelPosA[currentChannel];
        var cx=jarvis.lib.getValueByUnit(this.navi.style.left,"px");
		var that=this;
		var aniId="setChannelPositionANI";
        
        if(tx!=cx){
			
			if(isAni==true)
			{
				if(this.moveAble==true || currentChannel!=this.currentChannel){
				
					this.moveAble=false;
					jarvis.animation.stopAnimation(aniId);
					jarvis.config.isAnimation=true;
					var aniDelegate=function(){};
					aniDelegate.prototype = {
						complete : function(e)
						{
							that.moveAble=true;
							jarvis.config.isAnimation=false;
							jarvis.lib.excuteDelegate(that.delegate,"changeChannelComplete");
						}
					}
					var easev="ease in";
					jarvis.animation.startAnimation(this.navi.style, {id:aniId, duration:0.3, left:tx, ease:easev ,isPx:true},new aniDelegate());
				}else{
				    
				}
			}else{
				jarvis.animation.stopAnimation(aniId);
				jarvis.config.isAnimation=false;

				this.navi.style.left=tx+'px';
				this.moveAble=true;
				if(isComplete==true){
					jarvis.lib.excuteDelegate(that.delegate,"changeChannelComplete");
				}
			}
		}else{
			 if(isComplete==true){
				jarvis.lib.excuteDelegate(that.delegate,"changeChannelComplete");
		     }
		}
        this.currentChannel=currentChannel;

		return this.currentChannel;

    }

}



